import pandas as pd
import numpy as np
import os
import random
import string
import shutil
import contextlib
import subprocess
import julia
import seaborn as sns
import matplotlib.pyplot as plt

def generate_random_string(n = 10):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=n))

def process_files(folder):
    files = []
    root = os.getcwd()
    source_folder = os.path.join(root, folder)

    if any(os.path.isfile(os.path.join(source_folder, f)) for f in os.listdir(source_folder)):

        subfolder = generate_random_string(n = 10)
        subfolder_path = os.path.join(source_folder, subfolder)
        os.makedirs(subfolder_path, exist_ok=True)

        for filename in os.listdir(source_folder):
            file_path = os.path.join(source_folder, filename)

            if os.path.isfile(file_path) and not (filename.endswith(".csv") or filename.endswith(".xlsx")):
                print(f"File '{filename}' is neither .csv nor .xlsx.")
                os.remove(file_path)  

            if filename.endswith(".xlsx"):
            
                print(f"Processing file: {filename}")

                try:
                    excel_data = pd.read_excel(file_path, sheet_name=None)

                    for sheet_name, data in excel_data.items():
                        csv_file_path = os.path.join(subfolder_path, generate_random_string()+".csv")
                        data.to_csv(csv_file_path, index=False)
                        print(f"Saved sheet '{sheet_name}' to '{csv_file_path}'")

                        files.append(csv_file_path)
                except:
                    print("Error processing file")
                os.remove(file_path)

            if filename.endswith(".csv"):
                
                destination_path = os.path.join(subfolder_path, filename)
                shutil.move(file_path, destination_path)
                print(f"Moved .csv file: {filename} to {destination_path}")    
                files.append(destination_path)  

        return subfolder_path, files
    else:
        print(f"Folder {folder} is empty")
        return False

def generate_histogram(data):

    sns.set(style="whitegrid")


    plt.figure(figsize=(10, 6))
    sns.histplot(data, bins=40, kde=True, color="skyblue", edgecolor="#1f77b4",  stat="probability")
    plt.title("Revenues distribution", fontsize=18, weight='bold', color="navy")
    plt.xlabel("Revenue", fontsize=14)
    plt.ylabel("Probability", fontsize=14 )
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)

    # Add a legend
    plt.legend(["KDE (Density Estimate)", "Histogram"], fontsize=12)


    plot_filename = generate_random_string(n = 10)+".png"  
    plt.savefig(plot_filename, bbox_inches="tight")
    plt.close()

    return plot_filename
CONFIG = r"""
    \documentclass{article}
    \usepackage{graphicx}
    \usepackage{geometry}
    \geometry{a4paper, margin=1in}
    \usepackage{booktabs}
    \usepackage{caption}
    \usepackage{subcaption}
    \title{Portfolio optimization}
    \author{Aaltoes Advicer}
    \usepackage{eurosym}
    \begin{document}
    \maketitle
    """

def generate_project_portfolio_report(folder, M,  budget, analysis=False, advanced=False, U=None, threshold=None, tolerance_level=None, max_violation=None):
    found_files = process_files(folder)
    if found_files:
        subfolder, files = found_files
        latex_content =CONFIG
        
        counter_table = 1
        counter_figure = 1 
        images = []
        needed_columns = ["project","profit","cost", "risk","dependence"]
        
        latex_content +=r"""This report is automatically generated by python script, any unformatting is sad, but inevitable."""
        for j, path in enumerate(files):
            output = Main.portfolio_optimization(path, M, budget, analysis = analysis, advanced = advanced, U=U, threshold=threshold, tolerance_level=tolerance_level, max_violation=max_violation)
            latex_content += r"""\newpage\section*{Optimization of Porfolio """+ str(j+1) +r"""}"""
            if output:
                df = pd.read_csv(path)
                df["dependence"] = df["dependence"].fillna(r"""-""")
                df = df[needed_columns]

                

                latex_content += r"""\par For the portfolio """+ str(j+1) +r""", we are given next input data (see Table """+str(counter_table)+r"""):"""
                counter_table+=1

                latex_table = r"""\begin{table}[ht]
        \centering
        \caption{Input data for Portfolio """ + str(j+1) + r"""}
        """ + df.to_latex(index=False, column_format="ccccc") + r"""
        \end{table}
        """ # index=False to exclude the row numbers
                latex_content += latex_table
                latex_content +=r"""\par Based on the provided data, the model managed to find next solution that satisfies all of the constraints of the problem (see Table """+str(counter_table)+r"""):"""
                counter_table+=1
                latex_table_solution = r"""\begin{table}[ht]
        \centering
        \caption{Advised projects to invest for Portfolio """ + str(j+1) + r"""}
        """ + df[output[0].astype(bool)].to_latex(index=False, column_format="ccccc") + r"""
        \end{table}
        """
                latex_content += latex_table_solution
                expected_profit =output[1]
                plot_revenue = generate_histogram(output[2])
                plot_test_revenue = generate_histogram(output[6])
                images.append(plot_revenue)
                images.append(plot_test_revenue)
                
                latex_content += r"""
        \begin{figure}[ht]
            \centering
            % First subfigure
            \begin{subfigure}[b]{0.45\textwidth}  % Adjust width as needed
                \centering
                \includegraphics[width=\linewidth]{"""+plot_revenue+r"""}  % Replace with your image path
                \caption{Distribution of revenues on a train set}
                \label{fig:subfig1}
            \end{subfigure}
            \hfill
            % Second subfigure
            \begin{subfigure}[b]{0.45\textwidth}  % Adjust width as needed
                \centering
                \includegraphics[width=\linewidth]{"""+plot_test_revenue+r"""}  % Replace with your image path
                \caption{Distribution of revenues on a test set}
                \label{fig:subfig2}
            \end{subfigure}
            
            % Main figure caption
            \caption{Distribution of revenues given provided solution}
            \label{fig:mainfigure}
        \end{figure}

        """
                latex_content += r"""
                \par As you can see from the plot (see Figure """+str(counter_figure)+r"""), the revenues on the test approximately follow the train set (if there are enough of scenarios).
                """
                counter_figure+=1
                latex_content += r"""With given solution, we managed to get expected revenue of """ + str(round(expected_profit, 2)) + r"""\euro"""

                perfect_information = output[4]
                scenario_price = output[5]

                latex_content += r""". Expected value of the perfect information is """+ str(round(perfect_information,2))+r"""\euro  and price of stochastic solution is """+str(round(scenario_price,2))+r"""\euro. """

                if advanced:
                    p = output[-1]
                    latex_content += r"""\par Since you prefered to use an extended version of problem formulation, we ensured that solution produces revenues of more than """+ str(threshold) +r""" in """ + str((1-p)*100)+r"""\% of scenarios. """

                latex_content += r"""The portfolio uses """+str(round(output[7], 2))+r"""/"""+str(budget)+r"""\euro from budget."""
            else:
                latex_content +=r"""\par Sorry, no feasible solution is found. Make sure that U is not too small."""
                if advanced:
                    latex_content +=r"""You can also try to relax your parameters for R, T and tolerance level."""
            
            

        latex_content += r"""\end{document}"""

   
        tex_filename = generate_random_string(n = 10)+".tex"
        with open(tex_filename, "w") as tex_file:
            tex_file.write(latex_content)

        os.environ["PATH"] += os.pathsep + "/Library/TeX/texbin"

        try:
            subprocess.run(["pdflatex", tex_filename], check=True)
            print("PDF успешно создан.")
        except subprocess.CalledProcessError:
            print("Ошибка при компиляции LaTeX в PDF.")

        for ext in [".aux", ".log", ".out", ".tex"]:
            temp_file = tex_filename.replace(".tex", ext)
            if os.path.exists(temp_file):
                os.remove(temp_file)
                print(f"{temp_file} удалён.")
            else:
                print(f"{temp_file} не найден.")
        for f in images:
            os.remove(f)
        if os.path.exists(subfolder):
            shutil.rmtree(subfolder)
    else:
        print("Что-то пошло не так")

if __name__ == "__main__":
    path = "folder"
    script = "script.jl"
    with open(os.devnull, "w") as f, contextlib.redirect_stdout(f):
        julia.install()

        from julia import Main

        julia.Julia(compiled_modules=False)  

        Main.eval("""
            redirect_stdout(devnull)
            import Pkg
            Pkg.activate(".")  # Activate the environment in the current directory
            Pkg.instantiate()  # Ensure all dependencies are installed
        """)

        Main.include(script)

    if os.path.exists(path):
        generate_project_portfolio_report(path, 100,  100000, analysis=True)
    


